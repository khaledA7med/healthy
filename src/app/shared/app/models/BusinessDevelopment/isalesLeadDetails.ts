import { IBusinessDevelopment } from "./ibusiness-development";
import { IDocumentList } from "./../App/IDocument";
import { IRequirement } from "./irequirement";
import { ICompetitors } from "./icompetitors";
import { IActivityLog } from "./iactivity-log";
export interface ISalesLeadDetails extends IBusinessDevelopment {
  docSNo?: number;
  prospectID?: number;
  producerID?: number;
  branch?: string;
  type?: string;
  policyDetails?: string;
  curr?: string;
  exRateAED?: number;
  exRateUSD?: number;
  estimatedPremium?: number;
  estimatedPremiumAED?: number;
  estimatedPremiumUSD?: number;
  chListRequirements?: string;
  recentPolicyId?: string;
  currentPolicyNo?: string;
  existingPolDetails?: string;
  currentBroker?: string;
  clientDecision?: string;
  issuedBy?: string;
  taskAssignedTo?: string;
  nextReminder?: boolean;
  nextReminderDate?: Date;
  nextReminderNotes?: string;
  clientDecisionOn?: Date;
  clientDecisionBy?: string;
  lossReason?: string;
  rejectionReason?: string;
  rejectionBy?: string;
  sendToUW?: boolean;
  sendToUnderWritingdate?: Date;
  sendBackDate?: Date;
  qutationSentToSalesDate?: Date;
  qutationSentToSalesBy?: string;
  firmOrderSubmittedBy?: string;
  firmOrderSubmittedOn?: Date;
  statusUpdatedOn?: Date;
  qutationSentToClientDate?: Date;
  deadLine?: Date;
  chDeadlinebool?: boolean;
  chDeadline?: number;
  chQuoatationSentToClient?: boolean;
  chQuoatation?: boolean;
  chRevisedQuoatation?: boolean;
  chClientResult?: boolean;
  itemCheck?: number;
  insuranceCopmany?: number;
  item?: string;
  visitDate?: Date;
  visitNotes?: string;
  salesActivityLogChecked?: boolean;
  salesActivityLogCheckedUpdate?: boolean;
  salesActivityLogs?: string;
  salesLeadCompetitorChecked?: boolean;
  salesLeadCompetitorUpdate?: boolean;
  salesLeadCompetitors?: string;
  underWriter?: string;
  documents?: IDocumentList[];
  documentList?: IDocumentList[];
  preferedInsuranceCompaniesArray?: string;
  preferedInsurComapnies?: string[];
  salesActivityLogList?: IActivityLog[];
  salesLeadCompetitorsList?: ICompetitors[];
  quotingRequierments?: string;
  isQuotingRequierments?: boolean;
  selectedQuotingCompany?: string;
  quotingRequirementsList?: IRequirement[];
  policyRequierments?: string;
  isPolicyRequierments?: boolean;
  selectedPolicyCompany?: string;
  policyRequiermentsList?: IRequirement[];
  staffName?: string;
  allowedToAccessProducer?: boolean;
  salesLeadTasks?: any[];
}
